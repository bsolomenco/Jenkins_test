/*
- clone/clean/update Probuild
- if there is a new commit for Dev
    test Dev revision
- else
    get current Akt revision
    clone/clean/update Akt
    if something new on Akt
        test Akt revision
*/

def Src = "${params.DEV_DIR}\\src"
def ProBuildBin = "G:\\ProBuild\\Utilities\\Common"
def Rev = 0
def startTestJob_DEV = false
def startTestJob_AKT = false
pipeline{
    options{timestamps()}
    parameters{
        string(name:"NOD"         , defaultValue:"Prokas"        , description: "Jenkins node label where to run")
        string(name:"PROBUILD_DIR", defaultValue:"G:\\ProBuild"  , description: "ProBuild folder")
        string(name:"DEV_DIR"     , defaultValue:"G:\\Dev"       , description: "Dev folder (trunk)")
        string(name:"AKT_DIR"     , defaultValue:"G:\\Akt"       , description: "Akt folder (latest version, e.g. 7.6.725 ...)")
    }
    agent{label "${params.NOD}"}
    stages{
        stage("ProBuild"){
            steps{
                script{
                    manager.addShortText("${params.PROBUILD_DIR}")
                    bat(label:"clean/revert/update ${params.PROBUILD_DIR}", script:"""
                        Prokas.exe svn ccu ProBuild"
                    """)
                }
            }
        }
        stage("DEV?"){
            steps{
                script{
                    bat(label:"clean/revert/update ${params.DEV_DIR}", script:"""
                        if NOT EXIST "${params.DEV_DIR}" (
                            md "${params.DEV_DIR}"
                            cd /D ${params.DEV_DIR}
                            Prokas.exe svn ccu trunk"
                        )
                    """)
                    def currRevision = bat(label:'get curr revision', returnStatus:false, returnStdout:true, script: "@echo off & svn info --revision COMMITTED --show-item revision ${params.DEV_DIR}\\src").trim().toInteger()
                    Rev = bat(label:'get next revision', returnStatus:true, returnStdout:false, script: "@echo off & ${ProBuildBin}\\Prokas.exe svn nextRev ${params.DEV_DIR}\\src")
                    if(currRevision < Rev){
                        echo "currRevision=${currRevision} < nextRevision=${Rev} => start testing job"
                        startTestJob_DEV = true
                    }
                }
            }
        }
        stage("DEV rev test"){
            when{expression{startTestJob_DEV==true}}
            steps{
                script{
                    manager.addShortText("${params.DEV_DIR}")
                }
                build job:'Dev_RevTest', quietPeriod:0, wait:false, parameters:[
                    [$class: 'StringParameterValue', name: 'NOD', value: "${params.NOD}"],
                    [$class: 'StringParameterValue', name: 'DIR', value: "${params.DEV_DIR}"],
                    [$class: 'StringParameterValue', name: 'REV', value: "${Rev}"],
                ]
                echo "duration=${currentBuild.durationString}"
            }
        }
        stage("AKT?"){
            when{expression{startTestJob_DEV==false}}
            steps{
                script{
                    bat(label:"clean/revert/update ${params.AKT_DIR}", script:"""
                        if NOT EXIST "${params.AKT_DIR}" (md "${params.AKT_DIR}")
                        cd /D ${params.AKT_DIR}
                        Prokas.exe svn ccu akt"
                    """)
                    def currRevision = bat(label:'get curr revision', returnStatus:false, returnStdout:true, script: "@echo off & svn info --revision COMMITTED --show-item revision ${params.AKT_DIR}\\src").trim().toInteger()
                    Rev = bat(label:'get next revision', returnStatus:true, returnStdout:false, script: "@echo off & ${ProBuildBin}\\Prokas.exe svn nextRev ${params.AKT_DIR}\\src")
                    if(currRevision < Rev){
                        echo "currRevision=${currRevision} < nextRevision=${Rev} => start testing job"
                        startTestJob_AKT = true
                    }
                }
            }
        }
        stage("AKT rev test"){
            when{expression{startTestJob_AKT==true}}
            steps{
                script{
                    manager.addShortText("${params.AKT_DIR}")
                }
                build job:'Akt_RevTest', quietPeriod:0, wait:false, parameters:[
                    [$class: 'StringParameterValue', name: 'NOD', value: "${params.NOD}"],
                    [$class: 'StringParameterValue', name: 'DIR', value: "${params.AKT_DIR}"],
                    [$class: 'StringParameterValue', name: 'REV', value: "${Rev}"],
                ]
                echo "duration=${currentBuild.durationString}"
            }
        }
    }
}
